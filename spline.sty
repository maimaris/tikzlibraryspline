\RequirePackage{tikz}
\RequirePackage{trace}

\usepgflibrary{intersections}

\tikzset{
  spline through/.style={%
    to path={%
      \pgfextra{\tikz@splinethrough{(\tikztostart)#1(\tikztotarget)}}%
      \tikztonodes
    },%
  },
  spline through/.value required,
  spline debug/.store in=\tikz@spline@debug,
  spline debug/.default=\typeout,
}

\newcount\tikz@spline@segments

\let\tikz@spline@debug=\pgfutil@gobble

\def\tikz@splinethrough#1{%
  % Parse the points, including the start and end, in reverse
  \pgfintersectionsortbyfirstpath
  \let\tikz@spline@temp=\pgfutil@empty
  \tikz@spline@segments=-1
  \tikz@spline@parse@points#1\pgf@stop
  \c@pgf@countc=\tikz@spline@segments
  \advance\c@pgf@countc by-1
  \mathchardef\tikz@spline@max@interior@point\c@pgf@countc
  % Compute the r_i
  \c@pgf@countc=0
  \expandafter\tikz@spline@compute@r\tikz@spline@temp
  \expandafter\tikz@spline@compute@segments\tikz@spline@temp
  \tikz@spline@path
  \let\tikz@timer=\tikz@timer@spline
}

\def\tikz@spline@parse@points{%
  \pgfutil@ifnextchar\pgf@stop{%
    \pgfutil@gobble 
  }{%
    \tikz@scan@one@point\tikz@spline@handle@point
  }%
}

% Append the point as x,y/node name& to \tikz@spline@temp
\def\tikz@spline@handle@point#1{%
  \tikz@make@last@position{#1}%
  \tikz@spline@debug{Parsed point: (\the\tikz@lastx,\the\tikz@lasty) \detokenize{#1}}
  \iftikz@shapeborder
    \edef\tikz@spline@temp{\tikz@spline@temp\the\tikz@lastx,\the\tikz@lasty/\tikz@shapeborder@name&}%
  \else
    \edef\tikz@spline@temp{\tikz@spline@temp\the\tikz@lastx,\the\tikz@lasty/&}%
  \fi
  \advance\tikz@spline@segments by1
  \tikz@spline@parse@points
}

% This is computed by a simple recurrence
% b_0 = 2
% b_1 = 7/2
% b_i = 4 - 1/b_{i-1}
% This converges to sqrt(3)+2 = 3.73205.
% For i = n-1, the formula changes to b_i = 7 - 2/b_{i-1}
% Sets \c@pgf@counta to the numerator and \c@pgf@countb to the denominator.
\def\tikz@spline@compute@b{%
  \ifnum\c@pgf@countc=\tikz@spline@max@interior@point
    \advance\c@pgf@countc by-1
    \tikz@spline@compute@b@raw
    % Compute 7 - 2/b_{i-1}
    \c@pgf@countc=\numexpr7*\c@pgf@counta-2*\c@pgf@countb\relax
    \c@pgf@countb=\c@pgf@counta
    \c@pgf@counta=\c@pgf@countc
    \c@pgf@countc=\tikz@spline@max@interior@point
  \else
    \tikz@spline@compute@b@raw
  \fi
}

\def\tikz@spline@compute@b@raw{%
  \ifcase\c@pgf@countc
    \c@pgf@counta=2
    \c@pgf@countb=1
  \or % b_1 = 7/2 = 3.5
    \c@pgf@counta=7
    \c@pgf@countb=2
  \or % b_2 = 26/7 = 3.71429
    \c@pgf@counta=26
    \c@pgf@countb=7
  \or % b_3 = 97/26 = 3.73077
    \c@pgf@counta=97
    \c@pgf@countb=26
  \or % b_4 = 362/97 = 3.73196
    \c@pgf@counta=362
    \c@pgf@countb=97
  \or % b_5 = 1351/362 = 3.73204
    \c@pgf@counta=1351
    \c@pgf@countb=362
  \else % b_6 = 5042/1351 = 3.73205
    % For i > 6, b_i - b_6 < 0.00000045
    \c@pgf@counta=5042
    \c@pgf@countb=1351
  \fi
}

\newdimen\tikz@spline@x
\newdimen\tikz@spline@y
% \tikz@spline@compute@r kx_0,ky_0/name_1&...&kx_n,ky_n/name_n&
% Defines \tikz@spline@temp to
%   kx_n,ky_n/name_n&rx_{n-1},ry_{n-1}/kx_{n-1},ky_{n-1}/name_{n-1}&...&rx_0,ry_0/kx_0,ky_0/name_0&
% Arguments: kx_i,ky_i/name_i&kx_{i+1},ky_{i+1}/name_{i+1}&
% Prepends:  kx_{i+1},ky_{i+1}/name_{i+1}&rx_i,ry_i/ to \tikz@spline@temp
\def\tikz@spline@compute@r#1,#2/#3&#4,#5/#6&{%
  \ifnum0=\c@pgf@countc
    % i = 0
    % r_0 = k_0 + 2k_1
    \tikz@spline@debug{\number\c@pgf@countc: k[i]=(#1,#2), k[i+1]=(#4,#5)}%
    \tikz@spline@x=\dimexpr#1+#4*\tw@\relax
    \tikz@spline@y=\dimexpr#2+#5*\tw@\relax
    \tikz@spline@debug{\space\space\space r[i]=(\the\tikz@spline@x,\the\tikz@spline@y)}%
    \edef\tikz@spline@temp{%
      #4,#5/#6&%
      \the\tikz@spline@x,\the\tikz@spline@y/%
      #1,#2/#3&%
    }%
    \def\@next{\tikz@spline@compute@r#4,#5/#6&}%
  \else\ifnum\c@pgf@countc=\tikz@spline@max@interior@point
    % i = n-1
    % r_{n-1} = 8k_{n-1} + k_n - r_{n-2}*2/b
    \tikz@spline@debug{\number\c@pgf@countc: k[i]=(#1,#2), k[i+1]=(#4,#5),
             b=\number\c@pgf@counta/\number\c@pgf@countb}%
    \multiply\c@pgf@countb\tw@
    \tikz@spline@x=\dimexpr#1*8+#4-\tikz@spline@x*\c@pgf@countb/\c@pgf@counta\relax
    \tikz@spline@y=\dimexpr#2*8+#5-\tikz@spline@y*\c@pgf@countb/\c@pgf@counta\relax
    \tikz@spline@debug{\space\space\space r[i]=(\the\tikz@spline@x,\the\tikz@spline@y)}%
    \edef\tikz@spline@temp{%
      #4,#5/#6&%
      \the\tikz@spline@x,\the\tikz@spline@y/%
      \tikz@spline@temp
    }%
    \let\@next=\relax
  \else
    % 0 < i < n-1
    % r_i = 4k_i + 2k_{i+1} - r_{i-1}/b
    \tikz@spline@debug{\number\c@pgf@countc: k[i]=(#1,#2), k[i+1]=(#4,#5),
             b=\number\c@pgf@counta/\number\c@pgf@countb}%
    \tikz@spline@x=\dimexpr#1*4+#4*\tw@-\tikz@spline@x*\c@pgf@countb/\c@pgf@counta\relax
    \tikz@spline@y=\dimexpr#2*4+#5*\tw@-\tikz@spline@y*\c@pgf@countb/\c@pgf@counta\relax
    \tikz@spline@debug{\space\space\space r[i]=(\the\tikz@spline@x,\the\tikz@spline@y)}%
    \edef\tikz@spline@temp{%
      #4,#5/#6&%
      \the\tikz@spline@x,\the\tikz@spline@y/%
      \tikz@spline@temp
    }%
    \def\@next{\tikz@spline@compute@r#4,#5/#6&}%
  \fi\fi
  \tikz@spline@compute@b
  \advance\c@pgf@countc1
  \@next
}

% kx_{i+1},ky_{i+1}/name_{i+1}&rx_i,ry_i/kx_i,ky_i/name_i&
\def\tikz@spline@compute@segments#1,#2/#3&#4,#5/#6,#7/#8&{%
  \advance\c@pgf@countc by-1
  \tikz@spline@compute@b
  \def\@next{\tikz@spline@compute@segments#6,#7/#8&}%
  \ifnum\c@pgf@countc=\tikz@spline@max@interior@point
    % i = n - 1
    % p_{n-1} = r_{n-1}/b
    % q_{n-1} = (k_n + p_{n-1})/2
    \pgf@xa=\dimexpr#4*\c@pgf@countb/\c@pgf@counta\relax
    \pgf@ya=\dimexpr#5*\c@pgf@countb/\c@pgf@counta\relax
    \pgf@xb=\dimexpr(#1+\pgf@xa)/2\relax
    \pgf@yb=\dimexpr(#2+\pgf@ya)/2\relax
    \let\tikz@spline@temp\pgfutil@empty
  \else\ifnum0=\c@pgf@countc
    % i = 0
    % p_0 = (r_0 - p_1)/2
    % q_0 = 2k_1 - p_1
    \pgf@xa=\dimexpr(#4-\pgf@xc)/2\relax
    \pgf@ya=\dimexpr(#5-\pgf@yc)/2\relax
    \pgf@xb=\dimexpr#1*2-\pgf@xc\relax
    \pgf@yb=\dimexpr#2*2-\pgf@yc\relax
    \let\@next=\relax
  \else
    % 0 < i < n-1
    % p_i = (r_i - p_{i+1})/b
    % q_i = 2k_{i+1} - p_{i+1}
    \pgf@xa=\dimexpr(#4-\pgf@xc)*\c@pgf@countb/\c@pgf@counta\relax
    \pgf@ya=\dimexpr(#5-\pgf@yc)*\c@pgf@countb/\c@pgf@counta\relax
    \pgf@xb=\dimexpr#1*2-\pgf@xc\relax
    \pgf@yb=\dimexpr#2*2-\pgf@yc\relax
  \fi\fi
  \tikz@spline@debug{\the\c@pgf@countc:
    K[i]=(#6,#7),
    K[i+1]=(#1,#2)^^J\space\space\space
    r[i]=(#4,#5),
    b=\number\c@pgf@counta/\number\c@pgf@countb^^J\space\space\space
    P=(\the\pgf@xa,\the\pgf@ya),
    Q=(\the\pgf@ya,\the\pgf@yb),
  }%
  \expandafter\edef\csname tikz@spline@s@\number\c@pgf@countc\endcsname{%
    \def\noexpand\tikz@spline@zeroth{\noexpand\pgfqpoint{#6}{#7}}%
    \def\noexpand\tikz@spline@first{\noexpand\pgfqpoint{\the\pgf@xa}{\the\pgf@ya}}%
    \def\noexpand\tikz@spline@second{\noexpand\pgfqpoint{\the\pgf@xb}{\the\pgf@yb}}%
    \def\noexpand\tikz@spline@third{\noexpand\pgfqpoint{#1}{#2}}%
    \ifx\relax#8\relax
      \let\noexpand\tikz@spline@start\relax
    \else
      \def\noexpand\tikz@spline@start{#8}%
    \fi
    \ifx\relax#3\relax
      \let\noexpand\tikz@spline@end\relax
    \else
      \def\noexpand\tikz@spline@end{#3}%
    \fi
  }%
  \pgf@xc=\pgf@xa
  \pgf@yc=\pgf@ya
  \@next
}

\def\tikz@spline@select#1{%
  \csname tikz@spline@s@\number#1\endcsname
}

\def\tikz@spline@path{%
  \c@pgf@countc=0
  \tikz@spline@pathA
  % Update some values for TikZ in case additional path components are added
  \let\tikz@moveto@waiting=\tikz@spline@end
}

\newif\iftikz@spline@use@time

% Loop over the segments and add each one to the current path
\def\tikz@spline@pathA{%
  \tikz@spline@select{\c@pgf@countc}%
  \tikz@spline@third  \pgf@xc=\pgf@x \pgf@yc=\pgf@y
  \tikz@spline@second \pgf@xb=\pgf@x \pgf@yb=\pgf@y
  \tikz@spline@first  \pgf@xa=\pgf@x \pgf@ya=\pgf@y
  \tikz@spline@zeroth
  \tikz@spline@debug{Drawing (part of) the curve
    (\the\pgf@x,\the\pgf@y) (\the\pgf@xa,\the\pgf@ya)
    (\the\pgf@xb,\the\pgf@yb) (\the\pgf@xc,\the\pgf@yc)%
  }%
  % If the start or end coordinates are shapes, calculate the intersection
  % times
  \tikz@spline@use@timefalse
  \def\tikz@spline@timea{0}%
  \def\tikz@spline@timeb{1}%
  % Check for start shape
  \ifx\tikz@spline@start\relax\else
    \pgfutil@ifundefined{pgf@sh@bg@\csname pgf@sh@ns@\tikz@spline@start\endcsname}{%
    }{%
      \tikz@spline@border@time{\tikz@spline@start}{\tikz@spline@timea}{1}%
      \tikz@spline@use@timetrue
    }%
  \fi
  % Check for end shape
  \ifx\tikz@spline@end\relax\else
    \pgfutil@ifundefined{pgf@sh@bg@\csname pgf@sh@ns@\tikz@spline@end\endcsname}{%
    }{%
      \tikz@spline@border@time{\tikz@spline@end}{\tikz@spline@timeb}{\pgfintersectionsolutions}%
      \tikz@spline@use@timetrue
    }%
  \fi
  % If either endpoint was a shape, use \pgfpathcurvebetweentime to draw just
  % part of the curve.
  \iftikz@spline@use@time
    \tikz@spline@debug{\space\space\space\space from t=\tikz@spline@timea\space to
      t=\tikz@spline@timeb}%
    \pgfpathcurvebetweentime{\tikz@spline@timea}{\tikz@spline@timeb}{\tikz@spline@zeroth}%
      {\tikz@spline@first}{\tikz@spline@second}{\tikz@spline@third}%
  \else
    \pgfpathcurveto{\tikz@spline@first}{\tikz@spline@second}{\tikz@spline@third}%
  \fi
  \ifnum\c@pgf@countc=0
    % Save the start time for the timer.
    \let\tikz@spline@timer@start=\tikz@spline@timea
  \fi
  \advance\c@pgf@countc by1
  \ifnum\c@pgf@countc<\tikz@spline@segments\relax
    \expandafter\tikz@spline@pathA
  \else
    % Save the end time for the timer, set the last position, and the tangent.
    \ifdim\tikz@spline@timeb pt<1pt
      \begingroup
      % \pgfpointcurveattime puts points on the tangent in xa/ya and xb/yb.
      % XXX: This was computed from the intersection before, we could reuse it.
      \pgfpointcurveattime{\tikz@spline@timeb}{\tikz@spline@zeroth}{\tikz@spline@first}{\tikz@spline@second}{\tikz@spline@third}%
      \global\pgf@x=\pgf@x
      \global\pgf@y=\pgf@y
      \edef\tikz@marshal{%
        \endgroup
        \def\noexpand\tikz@tangent{\noexpand\pgfqpoint{\the\pgf@xa}{\the\pgf@ya}}%
      }%
      \tikz@marshal
      \tikz@make@last@position{}% We already globally set \pgf@x/\pgf@y
    \else
      % The end point of the curve is the last position and the second control
      % point is on the tangent.
      \tikz@make@last@position{\tikz@spline@third}%
      \let\tikz@tangent=\tikz@spline@second
    \fi
    \let\tikz@spline@timer@end=\tikz@spline@timeb
  \fi
}

% \tikz@spline@border@time{node}{\time}{which solution}
\def\tikz@spline@border@time#1#2#3{
  \begingroup
  \pgfintersectionofpaths{%
    \pgfpathmoveto{\tikz@spline@zeroth}%
    \pgfpathcurveto{\tikz@spline@first}{\tikz@spline@second}{\tikz@spline@third}%
  }{%
    % Install special macros (cargo-cult programming, I don't know what these
    % are or why they're important)
    \csname pgf@sh@ma@#1\endcsname
    % Install special coordinates (things like \radius and \centerpoint)
    \csname pgf@sh@np@#1\endcsname
    % Set the transform
    \pgfsettransform{\csname pgf@sh@nt@#1\endcsname}%
    % Create the background path
    \csname pgf@sh@bg@\csname pgf@sh@ns@#1\endcsname\endcsname
  }
  \ifnum\pgfintersectionsolutions=0
    \tikz@spline@debug{Unable to find an intersection between `#1' and the spline}
    \pgf@process{%
      \ifnum#3=0
        \tikz@spline@zeroth
      \else
        \tikz@spline@third
      \fi
    }%
  \else
    \pgfintersectiongetsolutiontimes{#3}{#2}{\tikz@spline@dummy}%
  \fi
  \edef\tikz@marshal{\endgroup\def\noexpand#2{#2}}%
  \tikz@marshal
}

% Transform \tikz@time to a point along the spline. If the start or end are
% shapes, then times 0 and 1 correspond to intersection points with the
% border.
\def\tikz@timer@spline{%
  % Compute the segment number in \c@pgf@counta
  \pgf@xa=\tikz@time \tikz@spline@segments
  \c@pgf@counta=\pgf@xa
  % Compute the fractional part in \pgf@xa
  \ifnum\c@pgf@counta=\tikz@spline@segments
    \c@pgf@counta=\tikz@spline@max@interior@point
    \pgf@xa=1pt
  \else
    \pgf@xa=\tikz@time pt
    \pgf@xa=\tikz@spline@segments \pgf@xa
    \advance\pgf@xa by -\c@pgf@counta pt
  \fi
  % Determine the start and end of the segments
  \ifnum\c@pgf@counta=0
    \pgf@xb=\tikz@spline@timer@start pt
  \else
    \pgf@xb=0pt
  \fi
  \ifnum\c@pgf@counta=\tikz@spline@max@interior@point
    \pgf@yb=\tikz@spline@timer@end pt
  \else
    \pgf@yb=1pt
  \fi
  % Put the scaling factor in \pgf2yb
  \advance\pgf@yb by-\pgf@xb
  % Compute scaled and shifted time
  \pgf@xa=\pgf@sys@tonumber{\pgf@yb}\pgf@xa
  \advance\pgf@xa by\pgf@xb
  \edef\tikz@spline@time{\pgf@sys@tonumber{\pgf@xa}}
  % Get the appropriate control points for the segment
  \tikz@spline@select{\c@pgf@counta}%
  \pgftransformcurveattime{\tikz@spline@time}{\tikz@spline@zeroth}{\tikz@spline@first}{\tikz@spline@second}{\tikz@spline@third}%
}

\endinput
% vim: set sw=2 sts=2 ts=8 et nospell:
